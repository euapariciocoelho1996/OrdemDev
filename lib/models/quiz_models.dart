import 'package:flutter/material.dart';
import 'dart:math';

enum Difficulty {
  iniciante,
  basico,
  intermediario,
  avancado
}

class QuizTask {
  final String id;
  final String title;
  final String description;
  final String question;
  final List<String> options;
  final int correctOptionIndex;
  final String feedbackCorrect;
  final String feedbackIncorrect;
  late List<String> shuffledOptions;
  late int shuffledCorrectIndex;

  QuizTask({
    required this.id,
    required this.title,
    required this.description,
    required this.question,
    required this.options,
    required this.correctOptionIndex,
    required this.feedbackCorrect,
    required this.feedbackIncorrect,
  }) {
    _shuffleOptions();
  }

  void _shuffleOptions() {
    // Cria uma lista de índices
    List<int> indices = List.generate(options.length, (i) => i);
    // Embaralha os índices
    indices.shuffle(Random());
    
    // Cria a lista de opções embaralhadas
    shuffledOptions = List.generate(options.length, (i) => options[indices[i]]);
    
    // Encontra o novo índice da resposta correta
    shuffledCorrectIndex = indices.indexOf(correctOptionIndex);
  }

  // Método para reembaralhar as opções
  void reshuffle() {
    _shuffleOptions();
  }
}

class QuizLevel {
  final int id;
  final String title;
  final String description;
  final Difficulty difficulty;
  final List<QuizTask> tasks;
  final bool isLocked;
  final String theme;
  final String content;

  const QuizLevel({
    required this.id,
    required this.title,
    required this.description,
    required this.difficulty,
    required this.tasks,
    this.isLocked = true,
    required this.theme,
    required this.content,
  });
}

// Dados dos níveis
final List<QuizLevel> quizLevels = [
  QuizLevel(
    id: 1,
    title: 'Entrada e Saída de Dados',
    description: 'Aprenda a interagir com o usuário através de entrada e saída de dados',
    difficulty: Difficulty.iniciante,
    theme: 'Entrada e saída de dados',
    content: 'Uso de print(), input(), exibição e captura de informações do usuário',
    isLocked: false,
    tasks: [
      QuizTask(
        id: '1_1',
        title: 'Primeiro Print',
        description: 'Use o comando print para exibir uma mensagem',
        question: 'Qual comando é usado para exibir texto na tela em Python?',
        options: ['print()', 'echo()', 'show()', 'display()'],
        correctOptionIndex: 0,
        feedbackCorrect: 'Excelente! O print() é o comando correto para exibir texto em Python!',
        feedbackIncorrect: 'Ops! Em Python, usamos print() para exibir texto na tela.',
      ),
      QuizTask(
        id: '1_2',
        title: 'Capturando Dados',
        description: 'Aprenda a capturar dados do usuário',
        question: 'Qual comando é usado para capturar dados do usuário em Python?',
        options: ['input()', 'read()', 'get()', 'scan()'],
        correctOptionIndex: 0,
        feedbackCorrect: 'Perfeito! O input() é o comando correto para capturar dados do usuário!',
        feedbackIncorrect: 'Em Python, usamos input() para capturar dados do usuário.',
      ),
      QuizTask(
        id: '1_3',
        title: 'Formatando Texto',
        description: 'Aprenda a formatar texto com print',
        question: 'Qual é a forma mais moderna e recomendada de formatar texto em Python?',
        options: [
          'f-strings (f"Olá, {nome}!")',
          'Método format()',
          'Operador %',
          'Concatenação com +'
        ],
        correctOptionIndex: 0,
        feedbackCorrect: 'Excelente! F-strings (introduzidas no Python 3.6+) são a forma mais moderna e legível de formatar texto!',
        feedbackIncorrect: 'F-strings (f"...") são a forma mais moderna e recomendada desde o Python 3.6+. Elas são mais legíveis e eficientes!',
      ),
      QuizTask(
        id: '1_4',
        title: 'Tipos de Dados',
        description: 'Entenda como o input() lida com diferentes tipos de dados',
        question: 'O que o input() retorna em Python?',
        options: [
          'Sempre retorna uma string',
          'Retorna o tipo do dado digitado',
          'Retorna um número',
          'Retorna um booleano'
        ],
        correctOptionIndex: 0,
        feedbackCorrect: 'Correto! O input() sempre retorna uma string, mesmo que o usuário digite um número!',
        feedbackIncorrect: 'O input() sempre retorna uma string, independente do que o usuário digitar.',
      ),
      QuizTask(
        id: '1_5',
        title: 'Convertendo Dados',
        description: 'Aprenda a converter dados do input',
        question: 'Como podemos converter a entrada do usuário para um número inteiro?',
        options: [
          'int(input())',
          'input().toInt()',
          'parseInt(input())',
          'input().parseInt()'
        ],
        correctOptionIndex: 0,
        feedbackCorrect: 'Perfeito! Em Python, usamos int() para converter uma string em número inteiro!',
        feedbackIncorrect: 'Em Python, usamos int() para converter uma string em número inteiro.',
      ),
    ],
  ),
  QuizLevel(
    id: 2,
    title: 'Variáveis',
    description: 'Domine o uso de variáveis em Python',
    difficulty: Difficulty.iniciante,
    theme: 'Variáveis',
    content: 'Criação, nomeação e uso de variáveis em Python',
    tasks: [
      QuizTask(
        id: '2_1',
        title: 'Criando Variáveis',
        description: 'Aprenda a criar e usar variáveis',
        question: 'Como criamos uma variável em Python?',
        options: [
          'nome = "Python"',
          'var nome = "Python"',
          'let nome = "Python"',
          'const nome = "Python"'
        ],
        correctOptionIndex: 0,
        feedbackCorrect: 'Perfeito! Em Python, criamos variáveis simplesmente atribuindo valores!',
        feedbackIncorrect: 'Em Python, não precisamos declarar o tipo da variável. Basta atribuir o valor!',
      ),
      QuizTask(
        id: '2_2',
        title: 'Nomes de Variáveis',
        description: 'Aprenda as regras de nomenclatura',
        question: 'Qual é um nome de variável válido em Python?',
        options: [
          'minha_variavel',
          '1variavel',
          '@variavel',
          'minha-variavel'
        ],
        correctOptionIndex: 0,
        feedbackCorrect: 'Excelente! Em Python, nomes de variáveis podem usar letras, números e underscore, mas não podem começar com números ou usar caracteres especiais!',
        feedbackIncorrect: 'Em Python, nomes de variáveis podem usar letras, números e underscore, mas não podem começar com números ou usar caracteres especiais!',
      ),
      QuizTask(
        id: '2_3',
        title: 'Atribuição Múltipla',
        description: 'Aprenda a atribuir múltiplos valores',
        question: 'Qual é a forma mais moderna de atribuir múltiplos valores em Python?',
        options: [
          'a, b = 1, 2',
          'a = 1; b = 2',
          'a = b = 1',
          'Todas as opções acima'
        ],
        correctOptionIndex: 0,
        feedbackCorrect: 'Perfeito! A atribuição múltipla (a, b = 1, 2) é a forma mais moderna e idiomática em Python!',
        feedbackIncorrect: 'A atribuição múltipla (a, b = 1, 2) é a forma mais moderna e idiomática em Python!',
      ),
      QuizTask(
        id: '2_4',
        title: 'Escopo de Variáveis',
        description: 'Entenda o escopo das variáveis',
        question: 'Onde uma variável criada dentro de uma função pode ser acessada?',
        options: [
          'Apenas dentro da função e funções aninhadas',
          'Em qualquer lugar do programa',
          'Apenas em funções do mesmo arquivo',
          'Apenas dentro da função'
        ],
        correctOptionIndex: 0,
        feedbackCorrect: 'Correto! Variáveis criadas dentro de funções têm escopo local, mas podem ser acessadas por funções aninhadas (closure)!',
        feedbackIncorrect: 'Variáveis criadas dentro de funções têm escopo local, mas podem ser acessadas por funções aninhadas (closure)!',
      ),
      QuizTask(
        id: '2_5',
        title: 'Constantes',
        description: 'Aprenda sobre constantes em Python',
        question: 'Qual é a forma mais moderna de definir uma constante em Python?',
        options: [
          'Usando typing.Final',
          'Usando letras maiúsculas',
          'Usando a palavra-chave const',
          'Não é possível definir constantes'
        ],
        correctOptionIndex: 0,
        feedbackCorrect: 'Excelente! typing.Final é a forma mais moderna e segura de definir constantes em Python 3.8+!',
        feedbackIncorrect: 'Em Python 3.8+, typing.Final é a forma mais moderna e segura de definir constantes!',
      ),
    ],
  ),
  QuizLevel(
    id: 3,
    title: 'Tipos de Dados',
    description: 'Conheça os tipos de dados em Python',
    difficulty: Difficulty.iniciante,
    theme: 'Tipos de dados',
    content: 'Tipos primitivos (int, float, str, bool) e identificação com type()',
    tasks: [
      QuizTask(
        id: '3_1',
        title: 'Números Inteiros',
        description: 'Aprenda sobre o tipo int',
        question: 'Qual é o tipo de dado de 42 em Python 3?',
        options: ['int', 'integer', 'number', 'long'],
        correctOptionIndex: 0,
        feedbackCorrect: 'Perfeito! Em Python 3, todos os números inteiros são do tipo int, independente do tamanho!',
        feedbackIncorrect: 'Em Python 3, todos os números inteiros são do tipo int, independente do tamanho!',
      ),
      QuizTask(
        id: '3_2',
        title: 'Números Decimais',
        description: 'Aprenda sobre o tipo float',
        question: 'Qual é o tipo de dado de 3.14 em Python?',
        options: ['float', 'double', 'decimal', 'real'],
        correctOptionIndex: 0,
        feedbackCorrect: 'Excelente! Em Python, números decimais são do tipo float!',
        feedbackIncorrect: 'Em Python, números decimais são do tipo float!',
      ),
      QuizTask(
        id: '3_3',
        title: 'Texto',
        description: 'Aprenda sobre o tipo str',
        question: 'Como podemos verificar o tipo de uma variável em Python 3?',
        options: [
          'type(variavel)',
          'typeof(variavel)',
          'variavel.type()',
          'getType(variavel)'
        ],
        correctOptionIndex: 0,
        feedbackCorrect: 'Correto! Em Python 3, usamos a função type() para verificar o tipo de uma variável!',
        feedbackIncorrect: 'Em Python 3, usamos a função type() para verificar o tipo de uma variável!',
      ),
      QuizTask(
        id: '3_4',
        title: 'Booleanos',
        description: 'Aprenda sobre o tipo bool',
        question: 'Quais são os valores booleanos em Python 3?',
        options: [
          'True e False',
          'true e false',
          '1 e 0',
          'Verdadeiro e Falso'
        ],
        correctOptionIndex: 0,
        feedbackCorrect: 'Perfeito! Em Python 3, os valores booleanos são True e False (com T e F maiúsculos)!',
        feedbackIncorrect: 'Em Python 3, os valores booleanos são True e False (com T e F maiúsculos)!',
      ),
      QuizTask(
        id: '3_5',
        title: 'Conversão de Tipos',
        description: 'Aprenda a converter entre tipos',
        question: 'Como convertemos uma string "42" para um número inteiro?',
        options: [
          'int("42")',
          '"42".toInt()',
          'parseInt("42")',
          'str2int("42")'
        ],
        correctOptionIndex: 0,
        feedbackCorrect: 'Excelente! Em Python, usamos int() para converter uma string em número inteiro!',
        feedbackIncorrect: 'Em Python, usamos int() para converter uma string em número inteiro!',
      ),
    ],
  ),
  QuizLevel(
    id: 4,
    title: 'Operadores',
    description: 'Domine os operadores em Python',
    difficulty: Difficulty.iniciante,
    theme: 'Operadores',
    content: 'Operadores aritméticos, relacionais e lógicos (+, -, ==, and, or, etc.)',
    tasks: [
      QuizTask(
        id: '4_1',
        title: 'Operadores Aritméticos',
        description: 'Aprenda sobre operadores básicos',
        question: 'Qual é o resultado de 5 // 2 em Python?',
        options: ['2', '2.5', '2.0', '3'],
        correctOptionIndex: 0,
        feedbackCorrect: 'Perfeito! O operador // realiza divisão inteira, descartando a parte decimal!',
        feedbackIncorrect: 'O operador // realiza divisão inteira, descartando a parte decimal!',
      ),
      QuizTask(
        id: '4_2',
        title: 'Operadores de Atribuição',
        description: 'Aprenda sobre operadores de atribuição',
        question: 'O que significa x += 1 em Python?',
        options: [
          'x = x + 1',
          'x = 1',
          'x = x * 1',
          'x = x - 1'
        ],
        correctOptionIndex: 0,
        feedbackCorrect: 'Excelente! += é uma forma abreviada de x = x + 1!',
        feedbackIncorrect: 'Em Python, += é uma forma abreviada de x = x + 1!',
      ),
      QuizTask(
        id: '4_3',
        title: 'Operadores de Comparação',
        description: 'Aprenda sobre operadores de comparação',
        question: 'Qual operador verifica se dois valores são diferentes?',
        options: ['!=', '<>', '=/=', '!=='],
        correctOptionIndex: 0,
        feedbackCorrect: 'Correto! Em Python, usamos != para verificar se dois valores são diferentes!',
        feedbackIncorrect: 'Em Python, usamos != para verificar se dois valores são diferentes!',
      ),
      QuizTask(
        id: '4_4',
        title: 'Operadores Lógicos',
        description: 'Aprenda sobre operadores lógicos',
        question: 'Qual é o resultado de True and False em Python?',
        options: ['False', 'True', 'None', 'Error'],
        correctOptionIndex: 0,
        feedbackCorrect: 'Perfeito! O operador and retorna True apenas se ambos os operandos forem True!',
        feedbackIncorrect: 'O operador and retorna True apenas se ambos os operandos forem True!',
      ),
      QuizTask(
        id: '4_5',
        title: 'Precedência de Operadores',
        description: 'Entenda a ordem de execução',
        question: 'Qual é o resultado de 2 + 3 * 4 em Python?',
        options: ['14', '20', '24', 'Error'],
        correctOptionIndex: 0,
        feedbackCorrect: 'Excelente! A multiplicação tem precedência sobre a adição!',
        feedbackIncorrect: 'A multiplicação tem precedência sobre a adição, então 3 * 4 é calculado primeiro!',
      ),
    ],
  ),
  QuizLevel(
    id: 5,
    title: 'Condicionais',
    description: 'Aprenda sobre estruturas condicionais',
    difficulty: Difficulty.basico,
    theme: 'Condicionais (if, else, elif)',
    content: 'Estruturas de decisão, blocos aninhados e operadores em condições',
    tasks: [
      QuizTask(
        id: '5_1',
        title: 'If Básico',
        description: 'Aprenda a usar o if',
        question: 'Como escrevemos uma estrutura if em Python?',
        options: [
          'if condicao:',
          'if (condicao) {',
          'if condicao {',
          'if (condicao):'
        ],
        correctOptionIndex: 0,
        feedbackCorrect: 'Perfeito! Em Python, usamos if condicao: (com dois pontos)!',
        feedbackIncorrect: 'Em Python, usamos if condicao: (com dois pontos), sem parênteses ou chaves!',
      ),
      QuizTask(
        id: '5_2',
        title: 'Else',
        description: 'Aprenda a usar o else',
        question: 'Como escrevemos uma estrutura if-else em Python?',
        options: [
          'if condicao:\n    codigo\nelse:\n    codigo',
          'if (condicao) {\n    codigo\n} else {\n    codigo\n}',
          'if condicao {\n    codigo\n} else {\n    codigo\n}',
          'if (condicao):\n    codigo\nelse:\n    codigo'
        ],
        correctOptionIndex: 0,
        feedbackCorrect: 'Excelente! Em Python, usamos if e else com dois pontos e indentação!',
        feedbackIncorrect: 'Em Python, usamos if e else com dois pontos e indentação, sem parênteses ou chaves!',
      ),
      QuizTask(
        id: '5_3',
        title: 'Elif',
        description: 'Aprenda a usar o elif',
        question: 'O que significa elif em Python?',
        options: [
          'else if',
          'else',
          'if else',
          'end if'
        ],
        correctOptionIndex: 0,
        feedbackCorrect: 'Correto! elif é uma abreviação de "else if" em Python!',
        feedbackIncorrect: 'elif é uma abreviação de "else if" em Python!',
      ),
      QuizTask(
        id: '5_4',
        title: 'Condições Aninhadas',
        description: 'Aprenda sobre condições aninhadas',
        question: 'Como escrevemos uma condição aninhada em Python?',
        options: [
          'if condicao1:\n    if condicao2:\n        codigo',
          'if (condicao1) {\n    if (condicao2) {\n        codigo\n    }\n}',
          'if condicao1 {\n    if condicao2 {\n        codigo\n    }\n}',
          'if (condicao1):\n    if (condicao2):\n        codigo'
        ],
        correctOptionIndex: 0,
        feedbackCorrect: 'Perfeito! Em Python, usamos indentação para aninhar condições!',
        feedbackIncorrect: 'Em Python, usamos indentação para aninhar condições, sem parênteses ou chaves!',
      ),
      QuizTask(
        id: '5_5',
        title: 'Operadores em Condições',
        description: 'Aprenda a usar operadores em condições',
        question: 'Como verificamos se um número está entre 1 e 10 em Python?',
        options: [
          'if 1 <= numero <= 10:',
          'if (numero >= 1 && numero <= 10)',
          'if (numero >= 1 and numero <= 10)',
          'if numero >= 1 and numero <= 10:'
        ],
        correctOptionIndex: 0,
        feedbackCorrect: 'Excelente! Em Python, podemos usar a sintaxe 1 <= numero <= 10!',
        feedbackIncorrect: 'Em Python, podemos usar a sintaxe 1 <= numero <= 10 para verificar intervalos!',
      ),
    ],
  ),
  QuizLevel(
    id: 6,
    title: 'Laços de Repetição',
    description: 'Aprenda sobre loops em Python',
    difficulty: Difficulty.basico,
    theme: 'Laços de repetição',
    content: 'Uso de while e for, range(), controle com break e continue',
    tasks: [
      QuizTask(
        id: '6_1',
        title: 'While Básico',
        description: 'Aprenda a usar o while',
        question: 'Como escrevemos um loop while em Python?',
        options: [
          'while condicao:',
          'while (condicao) {',
          'while condicao {',
          'while (condicao):'
        ],
        correctOptionIndex: 0,
        feedbackCorrect: 'Perfeito! Em Python, usamos while condicao: (com dois pontos)!',
        feedbackIncorrect: 'Em Python, usamos while condicao: (com dois pontos), sem parênteses ou chaves!',
      ),
      QuizTask(
        id: '6_2',
        title: 'For com Range',
        description: 'Aprenda a usar o for com range',
        question: 'Como iteramos de 0 a 4 em Python?',
        options: [
          'for i in range(5):',
          'for (i = 0; i < 5; i++)',
          'for i in [0,1,2,3,4]:',
          'for i from 0 to 4:'
        ],
        correctOptionIndex: 0,
        feedbackCorrect: 'Excelente! Em Python, usamos for i in range(5) para iterar de 0 a 4!',
        feedbackIncorrect: 'Em Python, usamos for i in range(5) para iterar de 0 a 4!',
      ),
      QuizTask(
        id: '6_3',
        title: 'Break',
        description: 'Aprenda a usar o break',
        question: 'O que faz o comando break em um loop?',
        options: [
          'Interrompe o loop completamente',
          'Pula para a próxima iteração',
          'Reinicia o loop',
          'Continua o loop normalmente'
        ],
        correctOptionIndex: 0,
        feedbackCorrect: 'Correto! O break interrompe completamente a execução do loop!',
        feedbackIncorrect: 'O break interrompe completamente a execução do loop, não apenas pula para a próxima iteração!',
      ),
      QuizTask(
        id: '6_4',
        title: 'Continue',
        description: 'Aprenda a usar o continue',
        question: 'O que faz o comando continue em um loop?',
        options: [
          'Pula para a próxima iteração',
          'Interrompe o loop completamente',
          'Reinicia o loop',
          'Continua o loop normalmente'
        ],
        correctOptionIndex: 0,
        feedbackCorrect: 'Perfeito! O continue pula para a próxima iteração do loop!',
        feedbackIncorrect: 'O continue pula para a próxima iteração do loop, não interrompe o loop completamente!',
      ),
      QuizTask(
        id: '6_5',
        title: 'Loops Aninhados',
        description: 'Aprenda sobre loops aninhados',
        question: 'Como escrevemos loops aninhados em Python?',
        options: [
          'for i in range(3):\n    for j in range(3):\n        codigo',
          'for (i = 0; i < 3; i++) {\n    for (j = 0; j < 3; j++) {\n        codigo\n    }\n}',
          'for i in range(3) {\n    for j in range(3) {\n        codigo\n    }\n}',
          'for (i in range(3)):\n    for (j in range(3)):\n        codigo'
        ],
        correctOptionIndex: 0,
        feedbackCorrect: 'Excelente! Em Python, usamos indentação para aninhar loops!',
        feedbackIncorrect: 'Em Python, usamos indentação para aninhar loops, sem parênteses ou chaves!',
      ),
    ],
  ),
  QuizLevel(
    id: 7,
    title: 'Listas',
    description: 'Aprenda sobre listas em Python',
    difficulty: Difficulty.intermediario,
    theme: 'Listas',
    content: 'Criação, acesso por índice, métodos como append(), remove(), len()',
    tasks: [
      QuizTask(
        id: '7_1',
        title: 'Criando Listas',
        description: 'Aprenda a criar listas',
        question: 'Como criamos uma lista em Python?',
        options: [
          'lista = [1, 2, 3]',
          'lista = {1, 2, 3}',
          'lista = (1, 2, 3)',
          'lista = <1, 2, 3>'
        ],
        correctOptionIndex: 0,
        feedbackCorrect: 'Perfeito! Em Python, listas são criadas usando colchetes []!',
        feedbackIncorrect: 'Em Python, listas são criadas usando colchetes [], não chaves ou parênteses!',
      ),
      QuizTask(
        id: '7_2',
        title: 'Acesso por Índice',
        description: 'Aprenda a acessar elementos',
        question: 'Como acessamos o primeiro elemento de uma lista?',
        options: [
          'lista[0]',
          'lista[1]',
          'lista.first',
          'lista.get(0)'
        ],
        correctOptionIndex: 0,
        feedbackCorrect: 'Excelente! Em Python, os índices começam em 0!',
        feedbackIncorrect: 'Em Python, os índices começam em 0, então o primeiro elemento é lista[0]!',
      ),
      QuizTask(
        id: '7_3',
        title: 'Métodos de Lista',
        description: 'Aprenda sobre métodos de lista',
        question: 'Como adicionamos um elemento ao final de uma lista?',
        options: [
          'lista.append(elemento)',
          'lista.add(elemento)',
          'lista.push(elemento)',
          'lista.insert(elemento)'
        ],
        correctOptionIndex: 0,
        feedbackCorrect: 'Correto! Em Python, usamos append() para adicionar elementos ao final da lista!',
        feedbackIncorrect: 'Em Python, usamos append() para adicionar elementos ao final da lista!',
      ),
      QuizTask(
        id: '7_4',
        title: 'Tamanho da Lista',
        description: 'Aprenda a obter o tamanho',
        question: 'Como obtemos o tamanho de uma lista?',
        options: [
          'len(lista)',
          'lista.length',
          'lista.size',
          'lista.count()'
        ],
        correctOptionIndex: 0,
        feedbackCorrect: 'Perfeito! Em Python, usamos len() para obter o tamanho de uma lista!',
        feedbackIncorrect: 'Em Python, usamos len() para obter o tamanho de uma lista!',
      ),
      QuizTask(
        id: '7_5',
        title: 'Fatiamento',
        description: 'Aprenda sobre fatiamento',
        question: 'Como obtemos os três primeiros elementos de uma lista?',
        options: [
          'lista[0:3]',
          'lista[1:3]',
          'lista[0:2]',
          'lista[:3]'
        ],
        correctOptionIndex: 3,
        feedbackCorrect: 'Excelente! Em Python, podemos usar lista[:3] para obter os três primeiros elementos!',
        feedbackIncorrect: 'Em Python, podemos usar lista[:3] para obter os três primeiros elementos!',
      ),
    ],
  ),
  QuizLevel(
    id: 8,
    title: 'Funções',
    description: 'Aprenda sobre funções em Python',
    difficulty: Difficulty.intermediario,
    theme: 'Funções',
    content: 'Definição com def, parâmetros, retorno de valores, escopo de variáveis',
    tasks: [
      QuizTask(
        id: '8_1',
        title: 'Definindo Funções',
        description: 'Aprenda a definir funções',
        question: 'Como definimos uma função em Python?',
        options: [
          'def nome_funcao():',
          'function nome_funcao():',
          'def nome_funcao {}',
          'function nome_funcao {}'
        ],
        correctOptionIndex: 0,
        feedbackCorrect: 'Perfeito! Em Python, usamos def para definir funções!',
        feedbackIncorrect: 'Em Python, usamos def para definir funções, não function!',
      ),
      QuizTask(
        id: '8_2',
        title: 'Parâmetros',
        description: 'Aprenda sobre parâmetros',
        question: 'Como definimos uma função com parâmetros?',
        options: [
          'def funcao(parametro1, parametro2):',
          'def funcao(parametro1; parametro2):',
          'def funcao(parametro1 parametro2):',
          'def funcao(parametro1, parametro2)'
        ],
        correctOptionIndex: 0,
        feedbackCorrect: 'Excelente! Em Python, parâmetros são separados por vírgula!',
        feedbackIncorrect: 'Em Python, parâmetros são separados por vírgula e a função termina com dois pontos!',
      ),
      QuizTask(
        id: '8_3',
        title: 'Retorno de Valores',
        description: 'Aprenda sobre retorno',
        question: 'Como retornamos um valor de uma função?',
        options: [
          'return valor',
          'retorno valor',
          'retorna valor',
          'retornar valor'
        ],
        correctOptionIndex: 0,
        feedbackCorrect: 'Correto! Em Python, usamos return para retornar valores!',
        feedbackIncorrect: 'Em Python, usamos return para retornar valores de uma função!',
      ),
      QuizTask(
        id: '8_4',
        title: 'Escopo de Variáveis',
        description: 'Aprenda sobre escopo',
        question: 'Onde uma variável definida dentro de uma função pode ser acessada?',
        options: [
          'Apenas dentro da função',
          'Em qualquer lugar do programa',
          'Apenas em funções aninhadas',
          'Apenas em funções do mesmo arquivo'
        ],
        correctOptionIndex: 0,
        feedbackCorrect: 'Perfeito! Variáveis definidas dentro de funções têm escopo local!',
        feedbackIncorrect: 'Variáveis definidas dentro de funções têm escopo local, só podem ser acessadas dentro da função!',
      ),
      QuizTask(
        id: '8_5',
        title: 'Funções Aninhadas',
        description: 'Aprenda sobre funções aninhadas',
        question: 'Como definimos uma função dentro de outra função?',
        options: [
          'def funcao_externa():\n    def funcao_interna():\n        codigo',
          'def funcao_externa() {\n    def funcao_interna() {\n        codigo\n    }\n}',
          'def funcao_externa {\n    def funcao_interna {\n        codigo\n    }\n}',
          'def funcao_externa():\n    function funcao_interna():\n        codigo'
        ],
        correctOptionIndex: 0,
        feedbackCorrect: 'Excelente! Em Python, usamos indentação para definir funções aninhadas!',
        feedbackIncorrect: 'Em Python, usamos indentação para definir funções aninhadas, sem chaves ou parênteses!',
      ),
    ],
  ),
  QuizLevel(
    id: 9,
    title: 'Entrada e Saída de Dados II',
    description: 'Aprenda mais sobre entrada e saída de dados em Python',
    difficulty: Difficulty.basico,
    theme: 'Entrada e saída de dados',
    content: 'Formatação de texto, conversão de tipos e tratamento de erros básicos',
    tasks: [
      QuizTask(
        id: '9_1',
        title: 'Formatando Números',
        description: 'Aprenda a formatar números',
        question: 'Como formatamos um número com 2 casas decimais?',
        options: ['f"{numero:.2f}"', 'format(numero, ".2f")', 'round(numero, 2)', 'str(numero)[:4]'],
        correctOptionIndex: 0,
        feedbackCorrect: 'Excelente! f-strings são a forma mais moderna de formatar números!',
        feedbackIncorrect: 'Em Python, f-strings são a forma mais moderna de formatar números!',
      ),
      QuizTask(
        id: '9_2',
        title: 'Lendo Arquivos',
        description: 'Aprenda a ler arquivos de texto',
        question: 'Como lemos todas as linhas de um arquivo?',
        options: ['arquivo.readlines()', 'arquivo.read()', 'arquivo.getlines()', 'arquivo.lines()'],
        correctOptionIndex: 0,
        feedbackCorrect: 'Perfeito! readlines() lê todas as linhas do arquivo!',
        feedbackIncorrect: 'Em Python, usamos readlines() para ler todas as linhas de um arquivo!',
      ),
      QuizTask(
        id: '9_3',
        title: 'Escrevendo em Arquivos',
        description: 'Aprenda a escrever em arquivos',
        question: 'Como escrevemos uma linha em um arquivo?',
        options: ['arquivo.write("texto")', 'arquivo.append("texto")', 'arquivo.add("texto")', 'arquivo.insert("texto")'],
        correctOptionIndex: 0,
        feedbackCorrect: 'Correto! write() é o método para escrever em arquivos!',
        feedbackIncorrect: 'Em Python, usamos write() para escrever em arquivos!',
      ),
      QuizTask(
        id: '9_4',
        title: 'Tratando Erros',
        description: 'Aprenda a tratar erros básicos',
        question: 'Como tratamos erros ao abrir um arquivo?',
        options: ['try:\n    arquivo = open("arquivo.txt")\nexcept:\n    print("Erro")', 'if arquivo.exists():\n    arquivo = open("arquivo.txt")', 'check_file("arquivo.txt")', 'validate_file("arquivo.txt")'],
        correctOptionIndex: 0,
        feedbackCorrect: 'Excelente! try/except é a forma básica de tratar erros em Python!',
        feedbackIncorrect: 'Em Python, usamos try/except para tratar erros básicos!',
      ),
      QuizTask(
        id: '9_5',
        title: 'Fechando Arquivos',
        description: 'Aprenda a fechar arquivos',
        question: 'Como fechamos um arquivo em Python?',
        options: ['arquivo.close()', 'close(arquivo)', 'arquivo.end()', 'arquivo.finish()'],
        correctOptionIndex: 0,
        feedbackCorrect: 'Perfeito! close() é o método para fechar arquivos!',
        feedbackIncorrect: 'Em Python, usamos close() para fechar arquivos!',
      ),
    ],
  ),
  QuizLevel(
    id: 10,
    title: 'Variáveis II',
    description: 'Aprenda mais sobre variáveis em Python',
    difficulty: Difficulty.basico,
    theme: 'Variáveis',
    content: 'Escopo de variáveis, constantes e boas práticas',
    tasks: [
      QuizTask(
        id: '10_1',
        title: 'Variáveis Globais',
        description: 'Aprenda sobre variáveis globais',
        question: 'Como declaramos uma variável global?',
        options: ['global variavel', 'variavel = global', 'declare global variavel', 'set_global variavel'],
        correctOptionIndex: 0,
        feedbackCorrect: 'Excelente! A palavra-chave global é usada para declarar variáveis globais!',
        feedbackIncorrect: 'Em Python, usamos a palavra-chave global para declarar variáveis globais!',
      ),
      QuizTask(
        id: '10_2',
        title: 'Constantes',
        description: 'Aprenda sobre constantes',
        question: 'Como definimos uma constante em Python?',
        options: ['PI = 3.14', 'const PI = 3.14', 'final PI = 3.14', 'PI := 3.14'],
        correctOptionIndex: 0,
        feedbackCorrect: 'Perfeito! Em Python, constantes são definidas com letras maiúsculas!',
        feedbackIncorrect: 'Em Python, constantes são definidas com letras maiúsculas!',
      ),
      QuizTask(
        id: '10_3',
        title: 'Escopo Local',
        description: 'Aprenda sobre escopo local',
        question: 'Onde uma variável local pode ser acessada?',
        options: ['Apenas dentro da função', 'Em qualquer lugar', 'Em funções aninhadas', 'Em todo o arquivo'],
        correctOptionIndex: 0,
        feedbackCorrect: 'Correto! Variáveis locais só podem ser acessadas dentro da função!',
        feedbackIncorrect: 'Variáveis locais só podem ser acessadas dentro da função!',
      ),
      QuizTask(
        id: '10_4',
        title: 'Nomes de Variáveis',
        description: 'Aprenda sobre nomenclatura',
        question: 'Qual é um bom nome para uma variável que guarda a idade?',
        options: ['idade', 'x', 'var1', 'VARIAVEL_IDADE'],
        correctOptionIndex: 0,
        feedbackCorrect: 'Excelente! Nomes descritivos em minúsculas são uma boa prática!',
        feedbackIncorrect: 'Em Python, usamos nomes descritivos em minúsculas para variáveis!',
      ),
      QuizTask(
        id: '10_5',
        title: 'Atribuição Múltipla',
        description: 'Aprenda sobre atribuição múltipla',
        question: 'Como atribuímos valores a múltiplas variáveis?',
        options: ['a, b = 1, 2', 'a = 1; b = 2', 'a = b = 1', 'a = 1, b = 2'],
        correctOptionIndex: 0,
        feedbackCorrect: 'Perfeito! A atribuição múltipla é uma forma elegante em Python!',
        feedbackIncorrect: 'Em Python, podemos usar a atribuição múltipla: a, b = 1, 2!',
      ),
    ],
  ),
  QuizLevel(
    id: 11,
    title: 'Tipos de Dados II',
    description: 'Aprenda mais sobre tipos de dados em Python',
    difficulty: Difficulty.basico,
    theme: 'Tipos de dados',
    content: 'Conversão de tipos, verificação de tipos e operações básicas',
    tasks: [
      QuizTask(
        id: '11_1',
        title: 'Convertendo Tipos',
        description: 'Aprenda a converter tipos',
        question: 'Como convertemos um número para texto?',
        options: ['str(numero)', 'numero.toString()', 'texto(numero)', 'numero.to_string()'],
        correctOptionIndex: 0,
        feedbackCorrect: 'Excelente! str() converte qualquer valor para texto!',
        feedbackIncorrect: 'Em Python, usamos str() para converter valores para texto!',
      ),
      QuizTask(
        id: '11_2',
        title: 'Verificando Tipos',
        description: 'Aprenda a verificar tipos',
        question: 'Como verificamos se uma variável é um número?',
        options: ['isinstance(variavel, int)', 'type(variavel) == int', 'variavel.is_number()', 'is_number(variavel)'],
        correctOptionIndex: 0,
        feedbackCorrect: 'Perfeito! isinstance() é a forma correta de verificar tipos!',
        feedbackIncorrect: 'Em Python, usamos isinstance() para verificar tipos!',
      ),
      QuizTask(
        id: '11_3',
        title: 'Números Decimais',
        description: 'Aprenda sobre números decimais',
        question: 'Como criamos um número decimal?',
        options: ['float("3.14")', 'decimal("3.14")', 'number("3.14")', 'real("3.14")'],
        correctOptionIndex: 0,
        feedbackCorrect: 'Correto! float() converte texto para número decimal!',
        feedbackIncorrect: 'Em Python, usamos float() para converter texto em número decimal!',
      ),
      QuizTask(
        id: '11_4',
        title: 'Booleanos',
        description: 'Aprenda sobre booleanos',
        question: 'Como convertemos um valor para booleano?',
        options: ['bool(valor)', 'boolean(valor)', 'valor.to_bool()', 'to_bool(valor)'],
        correctOptionIndex: 0,
        feedbackCorrect: 'Excelente! bool() converte qualquer valor para booleano!',
        feedbackIncorrect: 'Em Python, usamos bool() para converter valores para booleano!',
      ),
      QuizTask(
        id: '11_5',
        title: 'Operações com Tipos',
        description: 'Aprenda sobre operações com tipos',
        question: 'O que acontece quando somamos um texto e um número?',
        options: ['Erro de tipo', 'Converte o número para texto', 'Converte o texto para número', 'Soma os valores'],
        correctOptionIndex: 0,
        feedbackCorrect: 'Perfeito! Python não permite somar tipos diferentes!',
        feedbackIncorrect: 'Em Python, não podemos somar tipos diferentes!',
      ),
    ],
  ),
  QuizLevel(
    id: 12,
    title: 'Operadores II',
    description: 'Aprenda mais sobre operadores em Python',
    difficulty: Difficulty.basico,
    theme: 'Operadores',
    content: 'Operadores de atribuição, comparação e lógicos',
    tasks: [
      QuizTask(
        id: '12_1',
        title: 'Operadores de Atribuição',
        description: 'Aprenda sobre operadores de atribuição',
        question: 'O que significa x += 1?',
        options: ['x = x + 1', 'x = 1', 'x = x * 1', 'x = x - 1'],
        correctOptionIndex: 0,
        feedbackCorrect: 'Excelente! += é uma forma abreviada de x = x + 1!',
        feedbackIncorrect: 'Em Python, += é uma forma abreviada de x = x + 1!',
      ),
      QuizTask(
        id: '12_2',
        title: 'Operadores de Comparação',
        description: 'Aprenda sobre operadores de comparação',
        question: 'Como verificamos se um número é maior ou igual?',
        options: ['>=', '=>', '>==', '>='],
        correctOptionIndex: 0,
        feedbackCorrect: 'Perfeito! >= verifica se um número é maior ou igual!',
        feedbackIncorrect: 'Em Python, >= verifica se um número é maior ou igual!',
      ),
      QuizTask(
        id: '12_3',
        title: 'Operadores Lógicos',
        description: 'Aprenda sobre operadores lógicos',
        question: 'Como verificamos se duas condições são verdadeiras?',
        options: ['and', '&&', '&', 'andalso'],
        correctOptionIndex: 0,
        feedbackCorrect: 'Correto! and verifica se duas condições são verdadeiras!',
        feedbackIncorrect: 'Em Python, and verifica se duas condições são verdadeiras!',
      ),
      QuizTask(
        id: '12_4',
        title: 'Operador Not',
        description: 'Aprenda sobre o operador not',
        question: 'Como invertemos o valor de uma condição?',
        options: ['not condicao', '!condicao', '~condicao', 'not(condicao)'],
        correctOptionIndex: 0,
        feedbackCorrect: 'Excelente! not inverte o valor de uma condição!',
        feedbackIncorrect: 'Em Python, not inverte o valor de uma condição!',
      ),
      QuizTask(
        id: '12_5',
        title: 'Operador Or',
        description: 'Aprenda sobre o operador or',
        question: 'Como verificamos se uma das condições é verdadeira?',
        options: ['or', '||', '|', 'orelse'],
        correctOptionIndex: 0,
        feedbackCorrect: 'Perfeito! or verifica se uma das condições é verdadeira!',
        feedbackIncorrect: 'Em Python, or verifica se uma das condições é verdadeira!',
      ),
    ],
  ),
  QuizLevel(
    id: 13,
    title: 'Condicionais II',
    description: 'Aprenda mais sobre condicionais em Python',
    difficulty: Difficulty.basico,
    theme: 'Condicionais',
    content: 'Condicionais aninhadas, operador ternário e match/case básico',
    tasks: [
      QuizTask(
        id: '13_1',
        title: 'Condicionais Aninhadas',
        description: 'Aprenda sobre condicionais aninhadas',
        question: 'Como escrevemos uma condicional aninhada?',
        options: ['if condicao1:\n    if condicao2:\n        codigo', 'if (condicao1) {\n    if (condicao2) {\n        codigo\n    }\n}', 'if condica1 and condicao2:\n    codigo', 'if condicao1:\n    codigo\nelif condicao2:\n    codigo'],
        correctOptionIndex: 0,
        feedbackCorrect: 'Excelente! Em Python, usamos indentação para aninhar condicionais!',
        feedbackIncorrect: 'Em Python, usamos indentação para aninhar condicionais!',
      ),
      QuizTask(
        id: '13_2',
        title: 'Operador Ternário',
        description: 'Aprenda sobre operador ternário',
        question: 'Como escrevemos um operador ternário?',
        options: ['valor if condicao else outro_valor', 'condicao ? valor : outro_valor', 'if condicao then valor else outro_valor', 'condicao and valor or outro_valor'],
        correctOptionIndex: 0,
        feedbackCorrect: 'Perfeito! O operador ternário em Python usa if/else!',
        feedbackIncorrect: 'Em Python, o operador ternário usa if/else!',
      ),
      QuizTask(
        id: '13_3',
        title: 'Match/Case Básico',
        description: 'Aprenda sobre match/case básico',
        question: 'Como usamos match/case para verificar um valor?',
        options: ['match valor:\n    case 1:\n        codigo', 'switch valor:\n    case 1:\n        codigo', 'select valor:\n    case 1:\n        codigo', 'when valor:\n    case 1:\n        codigo'],
        correctOptionIndex: 0,
        feedbackCorrect: 'Correto! match/case é a forma moderna de fazer verificações em Python!',
        feedbackIncorrect: 'Em Python, usamos match/case para fazer verificações!',
      ),
      QuizTask(
        id: '13_4',
        title: 'Elif',
        description: 'Aprenda sobre elif',
        question: 'Quando usamos elif?',
        options: ['Para verificar outra condição se a anterior for falsa', 'Para verificar uma condição independente', 'Para verificar todas as condições', 'Para verificar a última condição'],
        correctOptionIndex: 0,
        feedbackCorrect: 'Excelente! elif é usado para verificar outra condição se a anterior for falsa!',
        feedbackIncorrect: 'elif é usado para verificar outra condição se a anterior for falsa!',
      ),
      QuizTask(
        id: '13_5',
        title: 'Else',
        description: 'Aprenda sobre else',
        question: 'Quando o else é executado?',
        options: ['Quando todas as condições são falsas', 'Sempre', 'Nunca', 'Quando a primeira condição é falsa'],
        correctOptionIndex: 0,
        feedbackCorrect: 'Perfeito! else é executado quando todas as condições são falsas!',
        feedbackIncorrect: 'else é executado quando todas as condições são falsas!',
      ),
    ],
  ),
  QuizLevel(
    id: 14,
    title: 'Laços de Repetição II',
    description: 'Aprenda mais sobre laços de repetição em Python',
    difficulty: Difficulty.basico,
    theme: 'Laços de repetição',
    content: 'For com range, while com contador e loops aninhados',
    tasks: [
      QuizTask(
        id: '14_1',
        title: 'For com Range',
        description: 'Aprenda sobre for com range',
        question: 'Como iteramos de 1 a 5?',
        options: ['for i in range(1, 6):', 'for (i = 1; i <= 5; i++)', 'for i in [1,2,3,4,5]:', 'for i from 1 to 5:'],
        correctOptionIndex: 0,
        feedbackCorrect: 'Excelente! range(1, 6) gera números de 1 a 5!',
        feedbackIncorrect: 'Em Python, range(1, 6) gera números de 1 a 5!',
      ),
      QuizTask(
        id: '14_2',
        title: 'While com Contador',
        description: 'Aprenda sobre while com contador',
        question: 'Como criamos um contador com while?',
        options: ['contador = 0\nwhile contador < 5:\n    contador += 1', 'while (contador = 0; contador < 5; contador++)', 'while contador in range(5):', 'while contador < 5: contador++'],
        correctOptionIndex: 0,
        feedbackCorrect: 'Perfeito! Em Python, incrementamos o contador manualmente!',
        feedbackIncorrect: 'Em Python, precisamos incrementar o contador manualmente!',
      ),
      QuizTask(
        id: '14_3',
        title: 'Loops Aninhados',
        description: 'Aprenda sobre loops aninhados',
        question: 'Como criamos loops aninhados?',
        options: ['for i in range(3):\n    for j in range(3):\n        codigo', 'for (i = 0; i < 3; i++) {\n    for (j = 0; j < 3; j++) {\n        codigo\n    }\n}', 'for i in range(3) {\n    for j in range(3) {\n        codigo\n    }\n}', 'for (i in range(3)):\n    for (j in range(3)):\n        codigo'],
        correctOptionIndex: 0,
        feedbackCorrect: 'Correto! Em Python, usamos indentação para aninhar loops!',
        feedbackIncorrect: 'Em Python, usamos indentação para aninhar loops!',
      ),
      QuizTask(
        id: '14_4',
        title: 'Break',
        description: 'Aprenda sobre break',
        question: 'O que faz o break em um loop?',
        options: ['Interrompe o loop', 'Pula para a próxima iteração', 'Reinicia o loop', 'Continua o loop'],
        correctOptionIndex: 0,
        feedbackCorrect: 'Excelente! break interrompe completamente o loop!',
        feedbackIncorrect: 'break interrompe completamente o loop!',
      ),
      QuizTask(
        id: '14_5',
        title: 'Continue',
        description: 'Aprenda sobre continue',
        question: 'O que faz o continue em um loop?',
        options: ['Pula para a próxima iteração', 'Interrompe o loop', 'Reinicia o loop', 'Continua o loop'],
        correctOptionIndex: 0,
        feedbackCorrect: 'Perfeito! continue pula para a próxima iteração do loop!',
        feedbackIncorrect: 'continue pula para a próxima iteração do loop!',
      ),
    ],
  ),
  QuizLevel(
    id: 15,
    title: 'Listas II',
    description: 'Aprenda mais sobre listas em Python',
    difficulty: Difficulty.basico,
    theme: 'Listas',
    content: 'Métodos de lista, fatiamento e listas aninhadas',
    tasks: [
      QuizTask(
        id: '15_1',
        title: 'Métodos de Lista',
        description: 'Aprenda sobre métodos de lista',
        question: 'Como adicionamos um elemento ao final da lista?',
        options: ['lista.append(elemento)', 'lista.add(elemento)', 'lista.push(elemento)', 'lista.insert(elemento)'],
        correctOptionIndex: 0,
        feedbackCorrect: 'Excelente! append() adiciona um elemento ao final da lista!',
        feedbackIncorrect: 'Em Python, usamos append() para adicionar elementos ao final da lista!',
      ),
      QuizTask(
        id: '15_2',
        title: 'Fatiamento',
        description: 'Aprenda sobre fatiamento',
        question: 'Como obtemos os três primeiros elementos?',
        options: ['lista[:3]', 'lista[0:3]', 'lista[1:3]', 'lista[0:2]'],
        correctOptionIndex: 0,
        feedbackCorrect: 'Perfeito! lista[:3] obtém os três primeiros elementos!',
        feedbackIncorrect: 'Em Python, lista[:3] obtém os três primeiros elementos!',
      ),
      QuizTask(
        id: '15_3',
        title: 'Listas Aninhadas',
        description: 'Aprenda sobre listas aninhadas',
        question: 'Como acessamos um elemento em uma lista aninhada?',
        options: ['lista[0][0]', 'lista[0,0]', 'lista.get(0).get(0)', 'lista[0].get(0)'],
        correctOptionIndex: 0,
        feedbackCorrect: 'Correto! lista[0][0] acessa o primeiro elemento da primeira lista!',
        feedbackIncorrect: 'Em Python, usamos lista[0][0] para acessar elementos em listas aninhadas!',
      ),
      QuizTask(
        id: '15_4',
        title: 'Removendo Elementos',
        description: 'Aprenda a remover elementos',
        question: 'Como removemos um elemento específico?',
        options: ['lista.remove(elemento)', 'lista.delete(elemento)', 'lista.pop(elemento)', 'lista.erase(elemento)'],
        correctOptionIndex: 0,
        feedbackCorrect: 'Excelente! remove() remove um elemento específico da lista!',
        feedbackIncorrect: 'Em Python, usamos remove() para remover elementos específicos!',
      ),
      QuizTask(
        id: '15_5',
        title: 'Inserindo Elementos',
        description: 'Aprenda a inserir elementos',
        question: 'Como inserimos um elemento em uma posição específica?',
        options: ['lista.insert(posicao, elemento)', 'lista.add(posicao, elemento)', 'lista.put(posicao, elemento)', 'lista.set(posicao, elemento)'],
        correctOptionIndex: 0,
        feedbackCorrect: 'Perfeito! insert() insere um elemento em uma posição específica!',
        feedbackIncorrect: 'Em Python, usamos insert() para inserir elementos em posições específicas!',
      ),
    ],
  ),
  QuizLevel(
    id: 16,
    title: 'Funções II',
    description: 'Aprenda mais sobre funções em Python',
    difficulty: Difficulty.basico,
    theme: 'Funções',
    content: 'Parâmetros, retorno de valores e escopo de variáveis',
    tasks: [
      QuizTask(
        id: '16_1',
        title: 'Parâmetros',
        description: 'Aprenda sobre parâmetros',
        question: 'Como definimos uma função com parâmetros?',
        options: ['def funcao(parametro1, parametro2):', 'def funcao(parametro1; parametro2):', 'def funcao(parametro1 parametro2):', 'def funcao(parametro1, parametro2)'],
        correctOptionIndex: 0,
        feedbackCorrect: 'Excelente! Parâmetros são separados por vírgula!',
        feedbackIncorrect: 'Em Python, parâmetros são separados por vírgula!',
      ),
      QuizTask(
        id: '16_2',
        title: 'Retorno de Valores',
        description: 'Aprenda sobre retorno',
        question: 'Como retornamos múltiplos valores?',
        options: ['return valor1, valor2', 'return [valor1, valor2]', 'return (valor1, valor2)', 'return {valor1, valor2}'],
        correctOptionIndex: 0,
        feedbackCorrect: 'Perfeito! Python permite retornar múltiplos valores separados por vírgula!',
        feedbackIncorrect: 'Em Python, podemos retornar múltiplos valores separados por vírgula!',
      ),
      QuizTask(
        id: '16_3',
        title: 'Escopo de Variáveis',
        description: 'Aprenda sobre escopo',
        question: 'Onde uma variável local pode ser acessada?',
        options: ['Apenas dentro da função', 'Em qualquer lugar', 'Em funções aninhadas', 'Em todo o arquivo'],
        correctOptionIndex: 0,
        feedbackCorrect: 'Correto! Variáveis locais só podem ser acessadas dentro da função!',
        feedbackIncorrect: 'Variáveis locais só podem ser acessadas dentro da função!',
      ),
      QuizTask(
        id: '16_4',
        title: 'Funções Aninhadas',
        description: 'Aprenda sobre funções aninhadas',
        question: 'Como definimos uma função dentro de outra?',
        options: ['def externa():\n    def interna():\n        codigo', 'def externa() {\n    def interna() {\n        codigo\n    }\n}', 'def externa {\n    def interna {\n        codigo\n    }\n}', 'def externa():\n    function interna():\n        codigo'],
        correctOptionIndex: 0,
        feedbackCorrect: 'Excelente! Em Python, usamos indentação para definir funções aninhadas!',
        feedbackIncorrect: 'Em Python, usamos indentação para definir funções aninhadas!',
      ),
      QuizTask(
        id: '16_5',
        title: 'Chamando Funções',
        description: 'Aprenda a chamar funções',
        question: 'Como chamamos uma função com argumentos?',
        options: ['funcao(arg1, arg2)', 'funcao arg1 arg2', 'funcao(arg1; arg2)', 'funcao[arg1, arg2]'],
        correctOptionIndex: 0,
        feedbackCorrect: 'Perfeito! Em Python, argumentos são passados entre parênteses!',
        feedbackIncorrect: 'Em Python, argumentos são passados entre parênteses!',
      ),
    ],
  ),
]; 